/**
 * Cryptographic utilities for Hive blockchain operations
 * Minimal implementation using hive-tx library for transaction signing
 */

import { PrivateKey } from 'hive-tx';
import { HiveError } from './types.js';

/**
 * Parse WIF (Wallet Import Format) private key using hive-tx
 * 
 * @param privateKeyWif - WIF-formatted private key string
 * @returns PrivateKey instance for transaction signing
 * @throws HiveError if key format is invalid
 */
export function parsePrivateKey(privateKeyWif: string): PrivateKey {
  try {
    return PrivateKey.from(privateKeyWif);
  } catch (error) {
    throw new HiveError(`Invalid private key format: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}

/**
 * Sign transaction using hive-tx library
 * 
 * @param transaction - Transaction object to sign
 * @param privateKey - PrivateKey instance for signing
 * @returns Signature string for the transaction
 */
export function signTransaction(transaction: any, privateKey: PrivateKey): string {
  try {
    return privateKey.sign(transaction).toString();
  } catch (error) {
    throw new HiveError(`Transaction signing failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}

/**
 * Generate transaction ID from transaction object
 * 
 * @param transaction - Transaction object
 * @returns Promise resolving to transaction ID string
 */
export async function generateTransactionId(transaction: any): Promise<string> {
  try {
    // Transaction ID is generated by hive-tx during the signing process
    // This is handled internally by the Transaction class
    return transaction.id || '';
  } catch (error) {
    throw new HiveError(`Transaction ID generation failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}